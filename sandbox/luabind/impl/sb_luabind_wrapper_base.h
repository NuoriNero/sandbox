#ifndef SB_LUABIND_WRAPPER_BASE_H_INCLUDED
#define SB_LUABIND_WRAPPER_BASE_H_INCLUDED

/**
	generated by ./gen_sb_luabind_wrapper_base.sh at Mon Jan  6 15:29:51 MSK 2014
*/
#include "../sb_luabind_stack.h"
namespace Sandbox {
	namespace luabind { namespace impl {
		class wrapper_base : public LuaReference {
		public:
			virtual ~wrapper_base() {}
		protected:
			// implementation for 0 args
			// void method void
			void call(const char* name){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				lua_call_method(L,1,0,name);
			}
			// void method void
			void fcall(){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				lua_call_method(L,0,0,"function");
			}
			// res method void
			template<class R>
			R call(const char* name,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				lua_call_method(L,1,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R>
			R fcall(){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				lua_call_method(L,0,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 1 args
			// void method void
			template<typename A1>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				lua_call_method(L,1+1,0,name);
			}
			// void method void
			template<typename A1>
			void fcall(A1 a1){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				lua_call_method(L,1,0,"function");
			}
			// res method void
			template<class R,typename A1>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				lua_call_method(L,1+1,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1>
			R fcall(A1 a1){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				lua_call_method(L,1,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 2 args
			// void method void
			template<typename A1,
				typename A2>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				lua_call_method(L,1+2,0,name);
			}
			// void method void
			template<typename A1,
				typename A2>
			void fcall(A1 a1,
 						A2 a2){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				lua_call_method(L,2,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				lua_call_method(L,1+2,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2>
			R fcall(A1 a1,
 						A2 a2){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				lua_call_method(L,2,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 3 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				lua_call_method(L,1+3,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				lua_call_method(L,3,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				lua_call_method(L,1+3,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				lua_call_method(L,3,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 4 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				lua_call_method(L,1+4,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				lua_call_method(L,4,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				lua_call_method(L,1+4,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				lua_call_method(L,4,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 5 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				lua_call_method(L,1+5,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				lua_call_method(L,5,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				lua_call_method(L,1+5,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				lua_call_method(L,5,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 6 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				lua_call_method(L,1+6,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				lua_call_method(L,6,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				lua_call_method(L,1+6,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				lua_call_method(L,6,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 7 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6,
						typename sb::type_traits<A7>::parameter_type a7){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				lua_call_method(L,1+7,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6,
 						A7 a7){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				lua_call_method(L,7,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6,
						typename sb::type_traits<A7>::parameter_type a7,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				lua_call_method(L,1+7,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6,
 						A7 a7){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				lua_call_method(L,7,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// implementation for 8 args
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7,
				typename A8>
			void call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6,
						typename sb::type_traits<A7>::parameter_type a7,
						typename sb::type_traits<A8>::parameter_type a8){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				stack<A8>::push(L,a8);
				lua_call_method(L,1+8,0,name);
			}
			// void method void
			template<typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7,
				typename A8>
			void fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6,
 						A7 a7,
 						A8 a8){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return;
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				stack<A8>::push(L,a8);
				lua_call_method(L,8,0,"function");
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7,
				typename A8>
			R call(const char* name,typename sb::type_traits<A1>::parameter_type a1,
						typename sb::type_traits<A2>::parameter_type a2,
						typename sb::type_traits<A3>::parameter_type a3,
						typename sb::type_traits<A4>::parameter_type a4,
						typename sb::type_traits<A5>::parameter_type a5,
						typename sb::type_traits<A6>::parameter_type a6,
						typename sb::type_traits<A7>::parameter_type a7,
						typename sb::type_traits<A8>::parameter_type a8,R* = 0){
				lua_State* L = GetVM();
				GetObject(L);
				lua_pushstring(L,name);
				lua_gettable(L,-2);
				lua_remove(L,-2);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				GetObject(L);
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				stack<A8>::push(L,a8);
				lua_call_method(L,1+8,1,name);
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
			// res method void
			template<class R,typename A1,
				typename A2,
				typename A3,
				typename A4,
				typename A5,
				typename A6,
				typename A7,
				typename A8>
			R fcall(A1 a1,
 						A2 a2,
 						A3 a3,
 						A4 a4,
 						A5 a5,
 						A6 a6,
 						A7 a7,
 						A8 a8){
				lua_State* L = GetVM();
				GetObject(L);
				if (!lua_isfunction(L,-1)) {
					sb_assert(false);
					return R();
				}
				stack<A1>::push(L,a1);
				stack<A2>::push(L,a2);
				stack<A3>::push(L,a3);
				stack<A4>::push(L,a4);
				stack<A5>::push(L,a5);
				stack<A6>::push(L,a6);
				stack<A7>::push(L,a7);
				stack<A8>::push(L,a8);
				lua_call_method(L,8,1,"function");
				R res = stack<R>::get(L,-1);
				lua_pop(L,1);
				return res;
			}
		};
	} }
}
#endif /*SB_LUABIND_WRAPPER_BASE_H_INCLUDED*/
